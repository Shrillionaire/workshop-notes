[
["index.html", "R Spatial Workshop Notes Introduction Workshop Organization Prior Knowledge Topics Additional information", " R Spatial Workshop Notes Winter Quarter 2019 Angela Li Introduction This site contains workshop notes from the R Spatial Workshop at the Center for Spatial Data Science. Workshops are held on Tuesdays at noon during Winter Quarter 2019. Our goal for running these workshops are to teach researchers how to work effectively with spatial data in R. You are welcome to join us in Searle 240B for workshops if you’re a member of the UChicago campus community! Bring a laptop to follow along. Additionally, please fill out the following short survey if you plan to attend the workshop this quarter. Workshop Organization Each chapter of this bookdown book represents a 1-hour workshop taught at the center. Chapters will be uploaded a day before the workshop so you can review the material prior to attending. Scripts from the workshops will be uploaded to Github following each workshop and can be found in the “R” folder at this link. Data used in the workshops can be found on the GeoDa Center data website, and will be linked to in each workshop chapter. All data will eventually be found in an R package developed by the CSDS. Prior Knowledge We assume that workshop attendees have used RStudio and are familiar with the basics of R. If you need a refresher, this R for Social Scientists tutorial developed by Data Carpentry is a good place to start. Additionally, Luc Anselin’s introductory R lab notes can be found on the CSDS Tutorials page. Topics We plan to cover the following topics: Spatial data formats Projections Spatial data handling Spatial data operations Static maps Interactive maps Organization of research projects Reproducible research with R Additional information Workshops are run by Angela Li, R Spatial Advocate for the CSDS. If you have any questions about the following material, please reach out to her at ali6@uchicago.edu. This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],
["project-setup.html", "Project Setup Prerequisites for Git workflow Workflow with Git Workflow without Git Additional reading", " Project Setup The goal of this section is to help you: Set up a directory on your computer to store scripts and data for this workshop Back up all workshop materials online using Github Prerequisites for Git workflow You have a Github account. If not, create one here. You have Git on your computer. Check by typing git --version in the Terminal pane in RStudio. Macs should already have Git, Windows will need to install Git Bash on their computer. You have configured Git. Check by typing git config --list in the Terminal pane in RStudio. If you have not configured git, follow these instructions. Workflow with Git Make sure you have the prerequisites for this workflow (see above section), otherwise you’ll be frustrated. Go to github.com and create a new repository. Choose to make it public or private (your choice). Initialize with a README. Open RStudio. Click “New Project”. Click “Version Control”. Paste the URL of the repository you just created. Create the following folders in your project by clicking on “New Folder” in the Files pane in RStudio: data doc R Put data in data, written output in doc, and R code scripts in R. Once you’ve put data and scripts in, you can back up your documents by going to the tab in RStudio called “Git”. Check the checkbox next to the items you’d like to back up. Click “Commit”. Type an informative message, i.e. “Added materials from first workshop”. Click “Push”. You have now uploaded your files to Github. If you go to the web link of the repository you created on Github, your materials should now be there. Workflow without Git Open RStudio. Click “New Project”. Click “New Directory”. Create the following folders in your project by clicking on “New Folder” in the Files pane in RStudio: data doc R Put data in data, written output in doc, and R code scripts in R. Additional reading Happy Git with R: the comprehensive guide on how to use Git/Github with R Project Management with RStudio: great resource for organizing your research files and scripts "],
["introduction-to-spatial-data.html", "Chapter 1 Introduction to Spatial Data 1.1 Learning objectives 1.2 Spatial data basics 1.3 Interactive tutorial 1.4 Links in this workshop", " Chapter 1 Introduction to Spatial Data 1.1 Learning objectives Understand the difference between vector and raster data Describe the components of a PROJ4 string Name the two main packages for spatial vector data in R Import and project spatial data in R 1.2 Spatial data basics We first reviewed some important information about spatial data. The two main types are vector (points, lines, polygons) and raster (pixels, surfaces). Since this workshop is given in the context of social science research, the rest of our workshop focuses on vector data (administrative boundaries, locations of business, road networks). Next, we went over what a coordinate reference system was, as well as the components of a PROJ4 string, or how coordinate reference systems are stored electronically. Rather than writing out the whole PROJ4 string, we can use an EPSG code as shorthand for it. This Software Carpentry workshop provides an excellent explanations and exercises for understanding coordinate reference systems. Finally, we learned that sf is the modern package for handling spatial data in R. Some old packages still use sp. However, it has a much more complicated representation of spatial data, so we will focus on sf. See this guide for a translation of sp to sf commands, if you’re used to using sp. 1.3 Interactive tutorial The rest of the workshop was dedicated to a hands-on exercise where we live coded together. The data we used was 1986 Chicago aldermanic ward boundary data, which can be found on the UChicago Map Collection page here. 1.3.1 Functions learned From the sf package: st_read() st_crs() st_transform() 1.3.2 Import spatial data The first thing we’ll do is import the spatial data. Our spatial data happens to be stored as a shapefile (.shp, but actually 4 files). These are getting less fashionable (see GeoJSON, etc.), but a lot of spatial data is still stored this way. First load the sf library. If you don’t have it, install it in your console or in the Packages RStudio pane. # install.packages(&quot;sf&quot;) library(sf) ## Warning: package &#39;sf&#39; was built under R version 3.4.4 ## Linking to GEOS 3.6.1, GDAL 2.1.3, PROJ 4.9.3 Tip: You can use the keyboard shortcut Ctrl-Enter to run a line of code in R. We’ll use the st_read function. This also reads GeoJSON, PostGIS databases, and more. ward86 &lt;- st_read(&quot;data/chicago-wards/ward1986.shp&quot;) ## Reading layer `ward1986&#39; from data source `/Users/angela/Desktop/Spatial Data Science/workshop-notes/data/chicago-wards/ward1986.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 51 features and 1 field (with 1 geometry empty) ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -87.9402 ymin: 41.6443 xmax: -87.524 ymax: 42.0231 ## epsg (SRID): 4269 ## proj4string: +proj=longlat +datum=NAD83 +no_defs Press tab after typing in st_read(&quot;&quot;) with your cursor in between the quotation marks and you’ll get a nice autocomplete feature. Check what projection the data is in: st_crs(ward86) ## Coordinate Reference System: ## EPSG: 4269 ## proj4string: &quot;+proj=longlat +datum=NAD83 +no_defs&quot; Sike, this isn’t projected! You can tell because the proj4string starts with +proj=longlat. You can still plot this, but things will start to get iffy if you try to do distance or area calculations, or plot these ward boundaries with other layers. I can still plot the map, but as a good geographic data analyst, I’ll need to project it. plot(ward86) 1.3.3 Project your data We need to project the data: but how do we choose what projection we need? This is a deep philosophical question, but thankfully the UChicago library has already told us the best projections to use for our data: Illinois East State Plane or UTM Zone 16. I generally do a online search to look up the EPSG codes for the projection I want to use, or use spatialreference.org, which has a database for all EPSG codes for projections. After I do some sleuthing, I find that the EPSG code I want for UTM Zone 16 is 32616. I then use st_transform() to project the data, and save it as a new sf dataframe. ward86_utm &lt;- st_transform(ward86, 32616) I check the CRS - yep, looks right! st_crs(ward86_utm) ## Coordinate Reference System: ## EPSG: 32616 ## proj4string: &quot;+proj=utm +zone=16 +datum=WGS84 +units=m +no_defs&quot; Question: what datum is this in? What are the units for this projection? Plot it: plot(ward86_utm) 1.3.4 Your challenge Project the 1986 ward data into the Illinois East State plane projection. Follow the above steps to do so. Hint: look up the EPSG code online! 1.3.5 Solution ward86_stateplane &lt;- st_transform(ward86, 3435) st_crs(ward86_stateplane) ## Coordinate Reference System: ## EPSG: 3435 ## proj4string: &quot;+proj=tmerc +lat_0=36.66666666666666 +lon_0=-88.33333333333333 +k=0.9999749999999999 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs&quot; plot(ward86_stateplane) Note that the +units=us-ft part of the proj4string means that any distance calculations you do on the ward86_stateplane data will be done in feet. 1.3.6 Bad projections Keep in mind that there are “bad” projections for your data. For example, if I accidentally chose the Alaska Albers projection for my data… ward86_alaska &lt;- st_transform(ward86, 3338) plot(ward86_alaska) Clearly this projection isn’t great for Chicago! But something to keep in mind, if, say, you’re making maps of places closer to the poles. 1.4 Links in this workshop Software Carpentry Vector Data: https://datacarpentry.org/organization-geospatial/02-intro-vector-data/index.html Software Carpentry CRS: https://datacarpentry.org/organization-geospatial/03-crs/index.html Migrating from sp to sf: outlines the differences between functions in the two packages GeoJSON: http://geojson.org/ Chicago ward data Link to good EPSG lookup website: http://spatialreference.org/ "],
["single-dataset-gis-operations.html", "Chapter 2 Single-Dataset GIS Operations 2.1 Learning Objectives 2.2 Exercises 2.3 Links", " Chapter 2 Single-Dataset GIS Operations 2.1 Learning Objectives Become familiar with several common single-dataset GIS operations Calculate centroids of polygons Create buffers Explore additional single-dataset GIS operations 2.2 Exercises Project 1986 ward data into correct UTM projection Cast ward data to “POLYGON” with st_cast Calculate centroids of wards with st_centroid Calculate bounding box with st_bbox Plot centroids, buffered centroids, and wards for each year 2.3 Links Geometric unary operations (aka, single dataset operations): https://r-spatial.github.io/sf/reference/geos_unary.html sf cheatsheet: https://github.com/rstudio/cheatsheets/blob/master/sf.pdf PostGIS cheatsheet (off of which sf is based): http://www.postgis.us/downloads/postgis21_cheatsheet.pdf "]
]
